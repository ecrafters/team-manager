rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions de validation communes
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserAuthenticated(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isManager() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager';
    }

    // Règles pour les utilisateurs
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin() || isUserAuthenticated(userId);
      allow delete: if isAdmin();
    }

    // Règles pour les projets
    match /projects/{projectId} {
      allow read: if isAuthenticated();
      allow create: if isManager() || isAdmin();
      allow update: if isManager() || isAdmin();
      allow delete: if isAdmin();
    }

    // Règles pour les absences
    match /absences/{absenceId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isManager() || isAdmin() || 
        (isUserAuthenticated(resource.data.userId) && resource.data.status == 'pending');
      allow delete: if isAdmin();
    }

    // Règles pour la charge de travail
    match /workloads/{workloadId} {
      allow read: if isAuthenticated();
      allow create: if isManager() || isAdmin();
      allow update: if isManager() || isAdmin();
      allow delete: if isAdmin();
    }
  }
}